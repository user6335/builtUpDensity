# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BuiltUpDensitiy
                                 A QGIS plugin
 This plugin can calculate the density of the built-up area using remote sensing raster data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-20
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Farid Azhari, Fatwa Ramdani, Bondan Sapta Prakoso (Geoinformatics Research Group Brawijaya University)
        email                : user6335@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import QgsMapLayerProxyModel, QgsRasterLayer
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.analysis import *
from qgis.utils import iface
from qgis.core import *
from osgeo import gdal

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .BuiltUpDensitiy_dialog import BuiltUpDensitiyDialog
import os.path


class BuiltUpDensitiy:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'BuiltUpDensitiy_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Built-up Density Calculator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('BuiltUpDensitiy', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/BuiltUpDensitiy/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Built-up Density'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Built-up Density Calculator'),
                action)
            self.iface.removeToolBarIcon(action)

    def clipRaster(self, vec, path, forClip):

        gdal.UseExceptions()
        vecClip = vec
        ras = path
        output = forClip + "_clipped.tif"
        result = gdal.Warp(destNameOrDestDS=output, srcDSOrSrcDSTab=ras, cutlineDSName=vecClip)
        result = None
        QMessageBox.information(self.dlg, "Message", "clipRaster")
        iface.addRasterLayer(output)

    def addRasterCalculatorEntry(self, ref, raster):
        ras = QgsRasterCalculatorEntry()
        ras.bandNumber = 1
        ras.raster = raster
        ras.ref = ref
        return ras

    def runRasterCalculator(self, formula, save_path, layer, entries):
        rasterCalculator = QgsRasterCalculator(formula, save_path, "GTiff", layer.extent(), layer.width(),
                                               layer.height(), entries)
        rasterCalculator.processCalculation()
        
    def ndvi_calc(self):
        layer_ndvi_nir = self.dlg.NDVImcb_input_NIR.currentLayer()
        layer_ndvi_red = self.dlg.NDVImcb_input_RED.currentLayer()
        forClip = self.dlg.NDVIFile_output.filePath()
        save_file_path = forClip + '.tif'
        vec = self.dlg.NDVIFile_vector.filePath()
        if self.outputCheck(forClip):
            entries = [
                self.addRasterCalculatorEntry("NIR@1", layer_ndvi_nir),
                self.addRasterCalculatorEntry("RED@2", layer_ndvi_red),
            ]
            self.runRasterCalculator('("NIR@1" - "RED@2") / ("NIR@1" + "RED@2")', save_file_path, layer_ndvi_nir,
                                     entries)
            if vec:
                self.clipRaster(vec, save_file_path, forClip)
            else:
                QMessageBox.information(self.dlg, "Message", "ndvi calc")
                iface.addRasterLayer(save_file_path)

    def ndbi_calc(self):
        layer_ndbi_nir = self.dlg.NDBImcb_input_NIR.currentLayer()
        layer_ndbi_swir = self.dlg.NDBImcb_input_SWIR.currentLayer()
        forClip = self.dlg.NDBIFile_output.filePath()
        save_file_path = forClip + '.tif'
        vec = self.dlg.NDBIFile_vector.filePath()

        if self.outputCheck(forClip):
            entries = [
                self.addRasterCalculatorEntry("NIR@1", layer_ndbi_nir),
                self.addRasterCalculatorEntry("SWIR@2", layer_ndbi_swir),
            ]
            self.runRasterCalculator('("SWIR@2" - "NIR@1") / ("SWIR@2" + "NIR@1")', save_file_path, layer_ndbi_nir,
                                     entries)
            if vec:
                self.clipRaster(vec, save_file_path, forClip)
            else:
                QMessageBox.information(self.dlg, "Message", "ndBi calc")
                iface.addRasterLayer(save_file_path)

    def densityInex_calc(self):
        layer_ndvi = self.dlg.Densitymcb_input_NDVI.currentLayer()
        layer_ndbi = self.dlg.Densitymcb_input_NDBI.currentLayer()
        outputCheckPath = self.dlg.DensityFile_output.filePath()
        save_file_path = outputCheckPath + '.tif'
        if self.outputCheck(outputCheckPath):
            entries = [
                self.addRasterCalculatorEntry("NDVI@1", layer_ndvi),
                self.addRasterCalculatorEntry("NDBI@2", layer_ndbi),
            ]
            self.runRasterCalculator('("NDBI@2" - "NDVI@1")', save_file_path, layer_ndvi, entries)
            QMessageBox.information(self.dlg, "Message", "densitiy Index CALC")
            iface.addRasterLayer(save_file_path)

    def outputCheck(self, outputPath):
        if outputPath:
            return True
        else:
            QMessageBox.warning(self.dlg, "Output Path Not Found", "Please input output path")
            return False

    def on_combobox_change(self, value, dlg):
        selected_layer = QgsProject.instance().mapLayersByName(value)[0]
        dlg.setLayer(selected_layer)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = BuiltUpDensitiyDialog()

            # set filter
            self.dlg.NDVIFile_output.setFilter("Tagged Image File (*tif)")
            self.dlg.NDBIFile_output.setFilter("Tagged Image File (*tif)")
            self.dlg.DensityFile_output.setFilter("Tagged Image File (*tif)")

            self.dlg.NDBIFile_vector.setFilter("Shapefile (*shp)")
            self.dlg.NDVIFile_vector.setFilter("Shapefile (*shp)")

            self.dlg.NDVImcb_input_NIR.setFilters(QgsMapLayerProxyModel.RasterLayer)
            self.dlg.NDVImcb_input_RED.setFilters(QgsMapLayerProxyModel.RasterLayer)
            self.dlg.NDBImcb_input_NIR.setFilters(QgsMapLayerProxyModel.RasterLayer)
            self.dlg.NDBImcb_input_SWIR.setFilters(QgsMapLayerProxyModel.RasterLayer)

            self.dlg.Densitymcb_input_NDBI.setFilters(QgsMapLayerProxyModel.RasterLayer)
            self.dlg.Densitymcb_input_NDVI.setFilters(QgsMapLayerProxyModel.RasterLayer)

            # init layer ndvi
            self.dlg.NDVImcb_input_NIR.currentLayer()
            self.dlg.NDVImcb_input_RED.currentLayer()

            # init layer ndbi
            self.dlg.NDBImcb_input_NIR.currentLayer()
            self.dlg.NDBImcb_input_SWIR.currentLayer()

            # init layer densityIndex
            self.dlg.Densitymcb_input_NDVI.currentLayer()
            self.dlg.Densitymcb_input_NDBI.currentLayer()

            # event
            self.dlg.NDVImcb_input_NIR.currentTextChanged.connect(
                lambda value: self.on_combobox_change(value, self.dlg.NDVImcb_input_NIR))
            self.dlg.NDVImcb_input_RED.currentTextChanged.connect(
                lambda value: self.on_combobox_change(value, self.dlg.NDVImcb_input_RED))
            self.dlg.NDBImcb_input_NIR.currentTextChanged.connect(
                lambda value: self.on_combobox_change(value, self.dlg.NDBImcb_input_NIR))
            self.dlg.NDBImcb_input_SWIR.currentTextChanged.connect(
                lambda value: self.on_combobox_change(value, self.dlg.NDBImcb_input_SWIR))
            self.dlg.Densitymcb_input_NDVI.currentTextChanged.connect(
                lambda value: self.on_combobox_change(value, self.dlg.Densitymcb_input_NDVI))
            self.dlg.Densitymcb_input_NDBI.currentTextChanged.connect(
                lambda value: self.on_combobox_change(value, self.dlg.Densitymcb_input_NDBI))

            self.dlg.NDVIButton_run.clicked.connect(self.ndvi_calc)
            self.dlg.NDBIButton_run.clicked.connect(self.ndbi_calc)
            self.dlg.DensityButton_run.clicked.connect(self.densityInex_calc)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
